{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto/./components/Card.js","webpack://mesto/./components/FormValidator.js","webpack://mesto/./components/Section.js","webpack://mesto/./components/Popup.js","webpack://mesto/./components/PopupWithForm.js","webpack://mesto/./components/PopupWithConfirmation.js","webpack://mesto/./components/UserInfo.js","webpack://mesto/./components/PopupWithImage.js","webpack://mesto/./components/Api.js","webpack://mesto/./utils/utils.js","webpack://mesto/./scripts/index.js"],"sourcesContent":["export class Card {\r\n    constructor(\r\n        card,\r\n        templateSelector,\r\n        handleCardClick,\r\n        myName,\r\n        onDeleteClick,\r\n        userId,\r\n        handleLikeClick\r\n    ) {\r\n        this.card = card;\r\n        this.templateSelector = templateSelector;\r\n        this.handleCardClick = handleCardClick;\r\n        this.myName = myName;\r\n        this.onDeleteClick = onDeleteClick;\r\n        this.userId = userId;\r\n        this._handleLikeClick = handleLikeClick;\r\n    }\r\n\r\n    _createCardDomNode() {\r\n        this._cardTemplate = document\r\n            .querySelector(this.templateSelector)\r\n            .content\r\n            .querySelector('.element')\r\n            .cloneNode(true);\r\n    }\r\n\r\n    _makeCardRemovable() {\r\n        //вставляю в разметку добавленной карточки кнопку trash для удаления карточки\r\n        this._cardTemplate.querySelector('.element__trash').classList.remove('element__trash_visible');\r\n    }\r\n\r\n    renderCard() {\r\n        this._createCardDomNode();\r\n        //получаю html код рисунка карточки и задаю ему атрибут scr со значением link из массива\r\n        this._cardTemplate.querySelector('.element__mask-group').setAttribute(\"src\", this.card.link);\r\n        this._cardTemplate.querySelector('.element__mask-group').setAttribute(\"alt\", this.card.name);\r\n        //получаю html код названия карточки и задаю ему название name из массива\r\n        this._cardTemplate.querySelector('.element__name').textContent = this.card.name;\r\n        //вставляю количество лайков в разметку\r\n        this._cardTemplate.querySelector('.element__like-amount').textContent = this.card.likes.length;\r\n        //определяю, есть ли мое имя в массиве лайков и, если да\r\n        if (this.card.likes.some((like) => like.name === this.myName)) {\r\n            //делаю лайк активным\r\n            this._cardTemplate.querySelector('.element__like').classList.add('element__like_active');\r\n        }\r\n        //определяю, моя ли это карточка\r\n        if (this.card.owner._id === this.userId) {\r\n            //делаю карточку удаляемой (с иконкой trash и присущими ей функциями)\r\n            this._makeCardRemovable();\r\n        }\r\n        this._addEventListeners();\r\n        return this._cardTemplate;\r\n    }\r\n\r\n    isLiked() {\r\n        /* Метод возвращает true, если лайк установлен, и false, если нет */\r\n        const _likeButton = this._cardTemplate.querySelector('.element__like');\r\n        if (_likeButton.classList.contains('element__like_active')) {\r\n            return true\r\n        }\r\n        else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    setLikeInfo(likes) {\r\n        this._cardTemplate.querySelector('.element__like-amount').textContent = likes.length;\r\n        // Меняем состояние кнопки лайка\r\n        const _likeButton = this._cardTemplate.querySelector('.element__like');\r\n        _likeButton.classList.toggle('element__like_active');\r\n    }\r\n\r\n    _addEventListeners() {\r\n        this._cardTemplate.querySelector('.element__like')\r\n            .addEventListener('click', () => this._handleLikeClick());\r\n        this._cardTemplate.querySelector('.element__button-mask-group')\r\n            .addEventListener('click', this.handleCardClick);\r\n        //навешиваю на кнопку trash слушатель для определения объекта карточки, на корзину которой кликнули\r\n        this._cardTemplate.querySelector('.element__trash')\r\n            .addEventListener('click',\r\n                () => this.onDeleteClick(this.card._id, this._cardTemplate));\r\n    }\r\n}","export class FormValidator {\r\n\r\n    constructor(config, formElement) {\r\n        this.config = config;\r\n        this.formElement = formElement;\r\n        this.inputFields = this.formElement.querySelectorAll('.form__input');\r\n        this.errorTexts = this.formElement.querySelectorAll('.popup__error');\r\n        this.saveButtons = this.formElement.querySelectorAll('.popup__save-button');\r\n    }\r\n\r\n    //задаю функцию удаления индикации поля при ошибке\r\n    _removeErrorIndication() {\r\n        this.inputFields.forEach(item => {\r\n            item.classList.remove('form__input_error');\r\n        });\r\n    }\r\n    //задаю функцию удаления текста ошибки\r\n    _deleteErrorMessage() {\r\n        this.errorTexts.forEach(item => {\r\n            item.textContent = '';\r\n        });\r\n    }\r\n    //задаю функцию деактивации кнопки сохранения данных ПОПАПА\r\n    _deactivateSaveButton() {\r\n        this.saveButtons.forEach((item) => {\r\n            item.disabled = true;\r\n            item.classList.add('popup__save-button_disabled');\r\n        });\r\n        document.querySelector('#delete').disabled = false;\r\n        document.querySelector('#delete').classList.remove('popup__save-button_disabled');\r\n    }\r\n\r\n    // объединяю очистку от индикации ошибок в один метод\r\n    resetValidation() {\r\n        this._removeErrorIndication();\r\n        this._deleteErrorMessage();\r\n        this._deactivateSaveButton()\r\n    }\r\n\r\n    //задаю функцию очистки полей по закрытии ПОПАПА\r\n    eraseInputText() {\r\n        this.inputFields.forEach((item) => {\r\n            item.value = '';\r\n        })\r\n    }\r\n\r\n    _hideInputError = (inputField) => {\r\n        // Находим <input>, в котором отображается ошибка, и соответствующий элемент <span>.\r\n        const errorName = inputField.getAttribute('name');\r\n        const errorElement = this.formElement.querySelector(`#${errorName}`);\r\n        //удаляем стили поля и текста при ошибке\r\n        inputField.classList.remove(this.config.inputErrorClass);\r\n        errorElement.classList.remove(this.config.errorClass);\r\n        // Удаляем текст ошибки из блока.\r\n        errorElement.textContent = '';\r\n    }\r\n\r\n    _showInputError = (inputField) => {\r\n        // Находим <input>, в котором отображается ошибка, и соответствующий элемент <span>.\r\n        const errorName = inputField.getAttribute('name');\r\n        const errorElement = this.formElement.querySelector(`#${errorName}`);\r\n        inputField.classList.add(this.config.inputErrorClass);\r\n        // Записываем текст ошибки в блок отображения ошибки.\r\n        errorElement.textContent = inputField.validationMessage;\r\n        errorElement.classList.add(this.config.errorClass);\r\n    };\r\n\r\n    _checkInputValidity = (inputField) => {\r\n        //проверяем содержание поля инпут на валидность методом validity.valid\r\n        if (inputField.validity.valid) {\r\n            this._hideInputError(inputField);\r\n        } else {\r\n            this._showInputError(inputField);\r\n        }\r\n    }\r\n\r\n    //задаем состояние кнопки попапа в зависимости от проверки валидности формы\r\n    _toggleButtonState = () => {\r\n        // Проверяем валидность формы.\r\n        const isFormValid = this.formElement.checkValidity();\r\n        // Если форма невалидна, то присваиваем свойству disabled кнопки значение true\r\n        const saveButtonElement = this.formElement.querySelector(this.config.submitButtonSelector);\r\n        saveButtonElement.disabled = !isFormValid;\r\n        // Если форма невалидна, добавляем кнопке класс\r\n        saveButtonElement.classList.toggle(this.config.inactiveButtonClass, !isFormValid);\r\n    }\r\n\r\n    _setEventListeners = () => {\r\n        const inputList = Array.from(this.formElement.querySelectorAll(this.config.inputSelector));\r\n        this._toggleButtonState();\r\n        // Навешиваем слушатели на ввод в поля формы попапа.\r\n        inputList.forEach((item) => {\r\n            // const inputField = item;\r\n            item.addEventListener('input', () => {\r\n                this._checkInputValidity(item);\r\n                this._toggleButtonState();\r\n            });\r\n        });\r\n    }\r\n\r\n    enableValidation = () => {\r\n        this.formElement.addEventListener('submit', (evt) => {\r\n            evt.preventDefault();\r\n        });\r\n        this._setEventListeners();\r\n    }\r\n}","export class Section {\r\n    constructor({ items, renderer }, elementsSelector) {\r\n        this._items = items;\r\n        this._renderer = renderer;\r\n        this._elementsSelector = elementsSelector;\r\n        this._container = document.querySelector(this._elementsSelector)\r\n    }\r\n    renderSection() {\r\n        this._items.forEach((card) => {\r\n            this._renderer(card)\r\n        });\r\n    }\r\n\r\n    addItem(renderedNewCard) {\r\n        //вставляю разметку добавленной карточкои в elements\r\n        this._container.prepend(renderedNewCard);\r\n    }\r\n}","export class Popup {\n    constructor(popupSelector) {\n        this.popupSelector = popupSelector;\n        this._handleEscClose = this._handleEscClose.bind(this);\n        this._popup = document.querySelector(this.popupSelector)\n    }\n    open() {\n        //добавяю в код ПОПАПА класс, отвечающий за отображение ПОПАПА\n        this._popup.classList.add('popup_opened');\n        // навешиваю слушатель события для закрытия попапа по esc\n        document.addEventListener('keydown',\n        this._handleEscClose);\n    }\n    close() {\n        //удаляю клас, отвечающий за отображение ПОПАПА\n        this._popup.classList.remove('popup_opened');\n        // удаляю слушатель события для закрытия попапа по esc\n        document.removeEventListener('keydown',\n            this._handleEscClose);\n    }\n    _handleEscClose(evt) {\n        //помещаю в переменную элемент открытого в настоящий момент ПОПАПА\n        if (evt.key === 'Escape') {\n            this.close();\n        }\n    }\n    setEventListeners() {\n        //программирую закрытие ПОПАПА по клику (на крестик или на оверлей)\n        this._popup.addEventListener('click', (evt) => {\n            if ((evt.target.classList.contains('popup_opened')) ||\n                (evt.target.classList.contains('popup__close-button'))) {\n                this.close()\n            }\n        })\n    }\n}","import { Popup } from './Popup.js';\r\n\r\nexport class PopupWithForm extends Popup {\r\n    constructor(popupSelector, submitForm) {\r\n        super(popupSelector);\r\n        this.submitForm = submitForm;\r\n        this._inputs = this._popup.querySelectorAll('.form__input');\r\n    }\r\n    _getInputValues() {\r\n        const inputs = Array.from(this._inputs);\r\n        //преобразую массив c разметками полей ввода с введенными значениями\r\n        //в объект с полями fild1, field 2 (if any)\r\n        const values = inputs.reduce((acc, current, index) => {\r\n            acc[`field${index + 1}`] = current.value;\r\n            return acc;\r\n        }, {});\r\n        return values;\r\n    }\r\n    setEventListeners() {\r\n        super.setEventListeners();\r\n        document.querySelector(this.popupSelector)\r\n            .querySelector('.form')\r\n            .addEventListener('submit', (evt) => {\r\n                //Эта строчка отменяет стандартную отправку формы\r\n                evt.preventDefault();\r\n                this.submitForm(this._getInputValues());\r\n            })\r\n    }\r\n\r\n    close() {\r\n        super.close();\r\n        document.querySelector(this.popupSelector)\r\n            .querySelector('.form').reset();\r\n        // this._inputs.forEach(element => {\r\n        //     element.value = '';\r\n        // });\r\n    }\r\n}","import { Popup } from './Popup.js';\r\nexport class PopupWithConfirmation extends Popup {\r\n    constructor(popupSelector, submitForm) {\r\n        super(popupSelector);\r\n        this.submitForm = submitForm;\r\n    }\r\n    setEventListeners() {\r\n        super.setEventListeners();\r\n        document.querySelector(this.popupSelector)\r\n            .querySelector('.form')\r\n            .addEventListener('submit', (evt) => {\r\n                evt.preventDefault();\r\n                this.submitForm();\r\n            }\r\n            )\r\n    }\r\n}","export class UserInfo {\r\n    constructor({ userNameSelector, userInfoSelector }) {\r\n        this.userNameSelector = userNameSelector;\r\n        this.userInfoSelector = userInfoSelector;\r\n        this.userName = document.querySelector(this.userNameSelector);\r\n        this.userInfo = document.querySelector(this.userInfoSelector)\r\n    }\r\n    getUserInfo() {\r\n        const user = {\r\n            name: this.userName.textContent,\r\n            info: this.userInfo.textContent\r\n        };\r\n        return user\r\n    }\r\n    setUserInfo(newUserName, newUserInfo) {\r\n        if (newUserName) {\r\n            this.userName.textContent = newUserName;\r\n        }\r\n        if (newUserInfo) {\r\n            this.userInfo.textContent = newUserInfo;\r\n        }\r\n    }\r\n}","import { Popup } from './Popup.js';\r\n\r\nexport class PopupWithImage extends Popup {\r\n    constructor(popupSelector) {\r\n        super(popupSelector);\r\n        // this.imagePopup = document.querySelector(`${popupSelector} .popup__mask-group-full-size`);\r\n        this.imagePopup = this._popup.querySelector('.popup__mask-group-full-size');\r\n        // this.imagePopupTitle = document.querySelector(`${popupSelector} .popup__title-mask-group`);\r\n        this.imagePopupTitle = this._popup.querySelector('.popup__title-mask-group');\r\n    }\r\n    handleCardClick = (event) => {\r\n        //определяю на какой элемент кликнули\r\n        const maskGroupTarget = event.target;\r\n        //извелкаю из кода кликнутого элемента путь к КАРТИНКЕ (src)\r\n        const maskGroupTargetImage = maskGroupTarget.getAttribute('src');\r\n        //вставляю путь КАРТИНКИ  в ПОПАП КАРТИНКИ\r\n        this.imagePopup.setAttribute(\"src\", maskGroupTargetImage);\r\n        //извлекаю название КАРТИНКИ\r\n        const elementName = event.currentTarget.parentElement.querySelector('.element__name').textContent;\r\n        //вставляю название КАРТИНКИ в ПОПАП КАРТИНКИ\r\n        this.imagePopupTitle.textContent = elementName;\r\n        //вставляю атрибут alt в тэг КАРТИНКИ\r\n        this.imagePopup.setAttribute(\"alt\", elementName);\r\n        //вставляю метод для открытия ПОПАПА КАРТИНКИ\r\n        super.open()\r\n    }\r\n}","export class Api {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        }\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n\r\n    getUserInfo = () => {\r\n        return fetch('https://nomoreparties.co/v1/cohort-34/users/me', {\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n            }\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    getInitialCards = () => {\r\n        return fetch('https://mesto.nomoreparties.co/v1/cohort-34/cards', {\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8'\r\n            }\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    patchAvatar = (body) => {\r\n        return fetch('https://nomoreparties.co/v1/cohort-34/users/me/avatar', {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    };\r\n\r\n    patchUserInfo = (body) => {\r\n        return fetch('https://mesto.nomoreparties.co/v1/cohort-34/users/me', {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    postNewCard = (body) => {\r\n        return fetch('https://mesto.nomoreparties.co/v1/cohort-34/cards', {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    deleteCard = (cardId) => {\r\n        return fetch(`https://mesto.nomoreparties.co/v1/cohort-34/cards/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n            }\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    putLike = (body, cardId) => {\r\n        return fetch(`https://mesto.nomoreparties.co/v1/cohort-34/cards/${cardId}/likes`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    deleteLike = (body, cardId) => {\r\n        return fetch(`https://mesto.nomoreparties.co/v1/cohort-34/cards/${cardId}/likes `, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n}","export function renderLoading(formSelector, saveButtonTitle) {\r\n    formSelector.querySelector('.popup__save-button-text').textContent = saveButtonTitle;\r\n}","import { Card } from '../components/Card.js';\r\nimport { FormValidator } from '../components/FormValidator.js';\r\nimport { Section } from '../components/Section.js';\r\nimport { PopupWithForm } from '../components/PopupWithForm.js';\r\nimport { PopupWithConfirmation } from '../components/PopupWithConfirmation.js';\r\nimport { UserInfo } from '../components/UserInfo.js';\r\nimport '../pages/index.css';\r\nimport { PopupWithImage } from '../components/PopupWithImage.js';\r\nimport { Api } from '../components/Api.js';\r\nimport { renderLoading } from '../utils/utils.js';\r\n\r\nconst popupWithImage = new PopupWithImage('.popup_mask-group');\r\npopupWithImage.setEventListeners();\r\n\r\nconst userInfo = new UserInfo({\r\n    userNameSelector: '.info__name',\r\n    userInfoSelector: '.info__engagement'\r\n});\r\n\r\n//создаю экземляр класса Апи для запросов к серверу методами этого класса\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-34',\r\n    headers: {\r\n        authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\n//помещаю код кнопки \"Редактировать\" инфо в константу\r\nconst editButton = document.querySelector('.info__edit-button');\r\n\r\n//помещаю код кнопки \"Добваить\" картинку/карточку в константу\r\nconst addButton = document.querySelector('.profile__add-button');\r\n\r\n//помещаю код всей ФОРМЫ ввода для \"Edit info\" в константу\r\nconst formEditInfo = document.querySelector('.form_edit-info');\r\n\r\n//помещаю код всей ФОРМЫ ввода для \"Form element\" в константу\r\nconst formAddElement = document.querySelector('.form_add-element');\r\n\r\n//помещаю код всей ФОРМЫ для \"Edit avatar\" в константу\r\nconst formEditAvatar = document.querySelector('.form_edit-avatar');\r\n\r\nconst config = {\r\n    inputSelector: '.form__input',\r\n    submitButtonSelector: '.popup__save-button',\r\n    inactiveButtonClass: 'popup__save-button_disabled',\r\n    inputErrorClass: 'form__input_error',\r\n    errorClass: 'popup__error_visible',\r\n}\r\n//помещаю в переменнную селектор template'a разметки карточки \r\nconst templateSelector = \".template\";\r\n\r\n//помещаю в переменную разметку аватара\r\nconst avatar = document.querySelector('.avatar');\r\n\r\n//помещаю в переменную разметку поля ввода для имени автора\r\nconst infoNameField = document.querySelector('.form__input_info_name');\r\n\r\n//помещаю в переменную разметку поля ввода для рода занятий автора\r\nconst infoEngagementField = document.querySelector('.form__input_info_engagement');\r\n\r\n//создаю обработчик нажатия на корзину удаления карточки\r\nfunction onDeleteClick(id, cardMarkup) {\r\n    //создаю обработчик submit'a попапа удаления карточки\r\n    const deleteCardPopupForm = new PopupWithConfirmation('.popup_delete', () => {\r\n        // удаляю объект карточки с сервера и разметку карточки из разметки страницы\r\n        api.deleteCard(id)\r\n            .then(() => {\r\n                cardMarkup.remove();\r\n                deleteCardPopupForm.close();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err); // выведем ошибку в консоль\r\n            })\r\n    });\r\n    //прикрепляю обработчик к форме удаления попапа\r\n    deleteCardPopupForm.setEventListeners();\r\n    //открываю попап удаления карточки\r\n    deleteCardPopupForm.open();\r\n};\r\n\r\n//задаю функцию создания экземпляра класса карточки вместе с обработчиком ее удаления\r\nfunction createCardExample(data, result, userId) {\r\n    const newCard = new Card(\r\n        data,\r\n        templateSelector,\r\n        popupWithImage.handleCardClick,\r\n        result.name,\r\n        onDeleteClick,\r\n        userId,\r\n        () => {\r\n            if (newCard.isLiked()) {\r\n                api.deleteLike(\r\n                    JSON.stringify({\r\n                        likes: data.owner.name\r\n                    }),\r\n                    data._id\r\n                )\r\n                    .then((result) => newCard.setLikeInfo(result.likes))\r\n                    .catch((err) => {\r\n                        console.log(err); // выведем ошибку в консоль\r\n                    });\r\n            } else {\r\n                // добавление лайка\r\n                api.putLike(\r\n                    JSON.stringify({\r\n                        likes: data.owner.name\r\n                    }),\r\n                    data._id\r\n                )\r\n                    .then((result) => newCard.setLikeInfo(result.likes))\r\n                    .catch((err) => {\r\n                        console.log(err); // выведем ошибку в консоль\r\n                    });\r\n            }\r\n        });\r\n    return newCard;\r\n}\r\n//отрисовываю начальные данные о пользователе - свойства name, about, avatar\r\n//запрашиваю с сервера информацию о пользователе - свойства name, about, avatar\r\napi.getUserInfo()\r\n    //вставляю информацию из полученного объекта в разметку\r\n    .then((result) => {\r\n        userInfo.setUserInfo(result.name, result.about);\r\n        document.querySelector('.avatar__photo').setAttribute(\"src\", result.avatar);\r\n        // получаю с сервера массив с дданными начальных карточек для их рендеринга\r\n        api.getInitialCards()\r\n            .then(initialCards => {\r\n                // отрисовываю массив с начальными карточками через создание экзепляра класса Section\r\n                const section = new Section({\r\n                    // задаю значения параметров конструктора класса Section\r\n                    items: initialCards,\r\n                    renderer: (item) => {\r\n                        //создаю экземпляр класса Card вместе с обработчиком удаления карточки\r\n                        const newCard = createCardExample(item, result, result._id);\r\n                        //отрисовываю карточку (создаю ДомНоду)\r\n                        const renderedNewCard = newCard.renderCard();\r\n                        //вставляю отрисованную карточку в контейнер\r\n                        section.addItem(renderedNewCard)\r\n                    }\r\n                },\r\n                    '.elements');\r\n                //вставляю карточки в разметку\r\n                section.renderSection();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err); // выведем ошибку в консоль\r\n            })\r\n    })\r\n//создаю обработчик формы редактирования аватара\r\nconst editAvatarPopupForm = new PopupWithForm('.popup_edit-avatar', (values) => {\r\n    renderLoading(formEditAvatar, 'Сохранение...');\r\n    //отправляю новую фото аватара на сервер\r\n    api.patchAvatar(\r\n        JSON.stringify({\r\n            avatar: values.field1\r\n        }))\r\n        //в случае успеха отрабатывает обработчик формы\r\n        .then(() => {\r\n            //вставляю в разметку новый путь к фото аватара\r\n            document.querySelector('.avatar__photo')\r\n                .setAttribute(\"src\", values.field1);\r\n            //возвращаю старое название кнопке Сохранить\r\n            renderLoading(formEditAvatar, 'Сохранить');\r\n            //закрываю попап методом экзкмпляра класса PopupWithForm\r\n            editAvatarPopupForm.close();\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n})\r\n//прикрепляю обработчик к форме\r\neditAvatarPopupForm.setEventListeners();\r\n\r\n//программирую нажатие на аватар\r\navatar.addEventListener('click', () => {\r\n    // очищаю поля ввода от индикации ошибок\r\n    popupEditAvatarValidation.resetValidation();\r\n    //обнуляю поля формы Add button (+) для следующего ввода\r\n    popupEditAvatarValidation.eraseInputText();\r\n    editAvatarPopupForm.open();\r\n})\r\n//создаю обработчик формы edit info\r\n// создаю экземпляр класса PopupWithForm для попапа edit info\r\nconst editInfoPopupForm = new PopupWithForm('.popup_edit-info', (values) => {\r\n    //перед запросом на сервер меняю текст кнопки попапа\r\n    renderLoading(formEditInfo, 'Сохранение...');\r\n    //заменяю данные о пользователе на сервере\r\n    api.patchUserInfo(JSON.stringify({\r\n        name: values.field1,\r\n        about: values.field2\r\n    }))\r\n        //в случае успеха \r\n        .then(() => {\r\n            //задаю даныые о пользоваетеле методом класса UserInfo\r\n            userInfo.setUserInfo(\r\n                values.field1,\r\n                values.field2\r\n            );\r\n            // возвращаю старое название кнопке Сохранить\r\n            renderLoading(formEditInfo, 'Сохранить');\r\n            //закрываю попап методом класса PopupWithForm\r\n            editInfoPopupForm.close();\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n});\r\n// Прикрепляею обработчик к форме в созданном экземпляре попапа\r\neditInfoPopupForm.setEventListeners();\r\n\r\n//программирую нажатие кнопки \"Редактировать\" (editButton)\r\neditButton.addEventListener('click', function pressEditButton() {\r\n    //получаю объект с данными пользователя\r\n    const user = userInfo.getUserInfo();\r\n    //помещаю полученные данные пользователя в разметку блока Info\r\n    userInfo.setUserInfo(user.name, user.info);\r\n    //помещаю полученные данные пользователя в поля формы при первом открытии\r\n    infoNameField.value = user.name;\r\n    infoEngagementField.value = user.info;\r\n    //очищаю поля ввода от индикации ошибок\r\n    popupEditInfoValidator.resetValidation();\r\n    //открываю попап для редактирования user Info\r\n    editInfoPopupForm.open();\r\n});\r\n\r\n// создаю обработчик для формы add element\r\n// создаю экземпляр класса PopupWithForm для попапа add element\r\nconst addElementPopupForm = new PopupWithForm('.popup_add-element', (values) => {\r\n    // в качестве параметров функции использую значения, полученные в input и задаю пустой массив лайкнувших\r\n    const item = {\r\n        name: values.field1,\r\n        link: values.field2,\r\n        likes: []\r\n    };\r\n    //отправляю новую карточку на сервер\r\n    api.postNewCard(\r\n        JSON.stringify({\r\n            name: item.name,\r\n            link: item.link,\r\n            likes: []\r\n        })\r\n    )\r\n        .then(result => {\r\n            const section = new Section({\r\n                // задаю значения параметров конструктора класса Section\r\n                items: [result],\r\n                renderer: (result) => {\r\n                    //создаю экземпляр класса Card вместе с обработчиком удаления карточки\r\n                    const newCard = createCardExample(result, result.owner, result.owner._id);\r\n                    //вставляю контент из инпута в экземпляр класса Card, создавая карточку\r\n                    const renderedNewCard = newCard.renderCard();\r\n                    //вставляю разметку добавленной карточки в elements\r\n                    section.addItem(renderedNewCard);\r\n                }\r\n            },\r\n                '.elements');\r\n            //отрисовываю карточку, запуская renderer\r\n            section.renderSection();\r\n            // закрываю попап методом из класса PopupWithForm, содержащий очистку полей\r\n            addElementPopupForm.close()\r\n        })\r\n        .catch((err) => {\r\n            console.log(err); // выведем ошибку в консоль\r\n        })\r\n})\r\n// Прикрепляю обработчик к форме в созданном экземпляре попапа\r\naddElementPopupForm.setEventListeners();\r\n\r\n// программирую нажатие кнопки \"Добавить\" (+) (addButton)\r\naddButton.addEventListener('click', function pressAddButton() {\r\n    // очищаю поля ввода от индикации ошибок\r\n    popupAddElementValidator.resetValidation()\r\n    //обнуляю поля формы Add button (+) для следующего ввода\r\n    popupAddElementValidator.eraseInputText();\r\n    // openPopup(popupAddElement);\r\n    addElementPopupForm.open();\r\n});\r\n\r\n// задаю правила валидации через создание экзепляров класса FormValidate для каждого попапа с формой ввода\r\nconst popupEditInfoValidator = new FormValidator(config, formEditInfo);\r\n\r\npopupEditInfoValidator.enableValidation();\r\n\r\nconst popupAddElementValidator = new FormValidator(config, formAddElement);\r\n\r\npopupAddElementValidator.enableValidation();\r\n\r\nconst popupEditAvatarValidation = new FormValidator(config, formEditAvatar);\r\n\r\npopupEditAvatarValidation.enableValidation();"],"names":["Card","card","templateSelector","handleCardClick","myName","onDeleteClick","userId","handleLikeClick","this","_handleLikeClick","_cardTemplate","document","querySelector","content","cloneNode","classList","remove","_createCardDomNode","setAttribute","link","name","textContent","likes","length","some","like","add","owner","_id","_makeCardRemovable","_addEventListeners","contains","toggle","addEventListener","FormValidator","config","formElement","inputField","errorName","getAttribute","errorElement","inputErrorClass","errorClass","validationMessage","validity","valid","_hideInputError","_showInputError","isFormValid","checkValidity","saveButtonElement","submitButtonSelector","disabled","inactiveButtonClass","inputList","Array","from","querySelectorAll","inputSelector","_toggleButtonState","forEach","item","_checkInputValidity","evt","preventDefault","_setEventListeners","inputFields","errorTexts","saveButtons","_removeErrorIndication","_deleteErrorMessage","_deactivateSaveButton","value","Section","elementsSelector","items","renderer","_items","_renderer","_elementsSelector","_container","renderedNewCard","prepend","Popup","popupSelector","_handleEscClose","bind","_popup","removeEventListener","key","close","target","PopupWithForm","submitForm","_inputs","reduce","acc","current","index","_getInputValues","reset","PopupWithConfirmation","UserInfo","userNameSelector","userInfoSelector","userName","userInfo","info","newUserName","newUserInfo","PopupWithImage","event","maskGroupTargetImage","imagePopup","elementName","currentTarget","parentElement","imagePopupTitle","Api","options","fetch","headers","authorization","then","res","_checkResponse","body","method","cardId","ok","json","Promise","reject","status","renderLoading","formSelector","saveButtonTitle","popupWithImage","setEventListeners","api","baseUrl","editButton","addButton","formEditInfo","formAddElement","formEditAvatar","avatar","infoNameField","infoEngagementField","id","cardMarkup","deleteCardPopupForm","deleteCard","catch","err","console","log","open","createCardExample","data","result","newCard","isLiked","deleteLike","JSON","stringify","setLikeInfo","putLike","getUserInfo","setUserInfo","about","getInitialCards","initialCards","section","renderCard","addItem","renderSection","editAvatarPopupForm","values","patchAvatar","field1","popupEditAvatarValidation","resetValidation","eraseInputText","editInfoPopupForm","patchUserInfo","field2","user","popupEditInfoValidator","addElementPopupForm","postNewCard","popupAddElementValidator","enableValidation"],"sourceRoot":""}