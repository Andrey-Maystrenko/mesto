{"version":3,"file":"main.js","mappings":"yLAAO,IAAMA,EAAb,WACI,WACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACF,I,IAAA,Q,4FAAA,S,EAoDU,WACR,IAAMC,EAAc,EAAKC,cAAcC,cAAc,kBACrDF,EAAYG,UAAUC,OAAO,wBAEzBJ,EAAYG,UAAUE,SAAS,wBAE/B,EAAKT,WACDU,KAAKC,UAAU,CACXC,MAAO,EAAKhB,KAAKiB,MAAMC,OACvB,EAAKlB,KAAKmB,KAEbC,MAAK,SAACC,GACHC,QAAQC,IAAI,qDAAsDF,GAElE,EAAKZ,cAAcC,cAAc,yBAAyBc,YAAcH,EAAOL,MAAMS,UAExFC,OAAM,SAACC,GACJL,QAAQC,IAAII,MAMpB,EAAKtB,cACDS,KAAKC,UAAU,CACXC,MAAO,EAAKhB,KAAKiB,MAAMC,OACvB,EAAKlB,KAAKmB,KAEbC,MAAK,SAAAC,GAEF,EAAKZ,cAAcC,cAAc,yBAAyBc,YAAcH,EAAOL,MAAMS,UAExFC,OAAM,SAACC,GACJL,QAAQC,IAAII,Q,EArF1B,oB,sBAAA,K,uDAAA,K,KACEC,KAAK5B,KAAOA,EACZ4B,KAAK3B,iBAAmBA,EACxB2B,KAAK1B,gBAAkBA,EACvB0B,KAAKzB,OAASA,EACdyB,KAAKxB,WAAaA,EAClBwB,KAAKvB,cAAgBA,EACrBuB,KAAKtB,cAAgBA,EACrBsB,KAAKrB,OAASA,E,QAlBtB,O,EAAA,G,EAAA,iCAqBI,WACIqB,KAAKnB,cAAgBoB,SAChBnB,cAAckB,KAAK3B,kBACnB6B,QACApB,cAAc,YACdqB,WAAU,KA1BvB,gCA6BI,WAEIH,KAAKnB,cAAcC,cAAc,mBAAmBC,UAAUqB,OAAO,4BA/B7E,wBAuCI,WAAa,WAoBT,OAnBAJ,KAAKK,qBAELL,KAAKnB,cAAcC,cAAc,wBAAwBwB,aAAa,MAAON,KAAK5B,KAAKmC,MACvFP,KAAKnB,cAAcC,cAAc,wBAAwBwB,aAAa,MAAON,KAAK5B,KAAKkB,MAEvFU,KAAKnB,cAAcC,cAAc,kBAAkBc,YAAcI,KAAK5B,KAAKkB,KAE3EU,KAAKnB,cAAcC,cAAc,yBAAyBc,YAAcI,KAAK5B,KAAKgB,MAAMS,OAEpFG,KAAK5B,KAAKgB,MAAMoB,MAAK,SAACC,GAAD,OAAUA,EAAKnB,OAAS,EAAKf,WAElDyB,KAAKnB,cAAcC,cAAc,kBAAkBC,UAAU2B,IAAI,wBAGjEV,KAAK5B,KAAKiB,MAAME,MAAQS,KAAKrB,QAE7BqB,KAAKW,qBAETX,KAAKY,qBACEZ,KAAKnB,gBA3DpB,gCAoGI,WAAqB,WACjBmB,KAAKnB,cAAcC,cAAc,kBAC5B+B,iBAAiB,QAASb,KAAKc,WACpCd,KAAKnB,cAAcC,cAAc,+BAC5B+B,iBAAiB,QAASb,KAAK1B,iBAEpC0B,KAAKnB,cAAcC,cAAc,mBAC5B+B,iBAAiB,SACd,kBAAM,EAAKnC,cAAc,EAAKN,KAAKmB,IAAK,EAAKV,uB,oEA5G7D,K,8RCAO,IAAMkC,EAAb,WAEI,WAAYC,EAAQC,GAAa,Y,4FAAA,mCA4Cf,SAACC,GAEf,IAAMC,EAAYD,EAAWE,aAAa,QACpCC,EAAe,EAAKJ,YAAYnC,cAAjB,WAAmCqC,IAExDD,EAAWnC,UAAUqB,OAAO,EAAKY,OAAOM,iBACxCD,EAAatC,UAAUqB,OAAO,EAAKY,OAAOO,YAE1CF,EAAazB,YAAc,MApDE,0BAuDf,SAACsB,GAEf,IAAMC,EAAYD,EAAWE,aAAa,QACpCC,EAAe,EAAKJ,YAAYnC,cAAjB,WAAmCqC,IACxDD,EAAWnC,UAAU2B,IAAI,EAAKM,OAAOM,iBAErCD,EAAazB,YAAcsB,EAAWM,kBACtCH,EAAatC,UAAU2B,IAAI,EAAKM,OAAOO,eA9DV,8BAiEX,SAACL,GAEfA,EAAWO,SAASC,MACpB,EAAKC,gBAAgBT,GAErB,EAAKU,gBAAgBV,MAtEI,6BA2EZ,WAEjB,IAAMW,EAAc,EAAKZ,YAAYa,gBAE/BC,EAAoB,EAAKd,YAAYnC,cAAc,EAAKkC,OAAOgB,sBACrED,EAAkBE,UAAYJ,EAE9BE,EAAkBhD,UAAUC,OAAO,EAAKgC,OAAOkB,qBAAsBL,MAlFxC,6BAqFZ,WACjB,IAAMM,EAAYC,MAAMC,KAAK,EAAKpB,YAAYqB,iBAAiB,EAAKtB,OAAOuB,gBAC3E,EAAKC,qBAELL,EAAUM,SAAQ,SAACC,GAEfA,EAAK7B,iBAAiB,SAAS,WAC3B,EAAK8B,oBAAoBD,GACzB,EAAKF,8BA7FgB,2BAkGd,WACf,EAAKvB,YAAYJ,iBAAiB,UAAU,SAAC+B,GACzCA,EAAIC,oBAER,EAAKC,wBArGL9C,KAAKgB,OAASA,EACdhB,KAAKiB,YAAcA,EACnBjB,KAAK+C,YAAc/C,KAAKiB,YAAYqB,iBAAiB,gBACrDtC,KAAKgD,WAAahD,KAAKiB,YAAYqB,iBAAiB,iBACpDtC,KAAKiD,YAAcjD,KAAKiB,YAAYqB,iBAAiB,uB,QAP7D,O,EAAA,G,EAAA,qCAWI,WACItC,KAAK+C,YAAYN,SAAQ,SAAAC,GACrBA,EAAK3D,UAAUqB,OAAO,0BAblC,iCAiBI,WACIJ,KAAKgD,WAAWP,SAAQ,SAAAC,GACpBA,EAAK9C,YAAc,QAnB/B,mCAuBI,WACII,KAAKiD,YAAYR,SAAQ,SAACC,GACtBA,EAAKT,UAAW,EAChBS,EAAK3D,UAAU2B,IAAI,kCAEvBT,SAASnB,cAAc,WAAWmD,UAAW,EAC7ChC,SAASnB,cAAc,WAAWC,UAAUqB,OAAO,iCA7B3D,6BAiCI,WACIJ,KAAKkD,yBACLlD,KAAKmD,sBACLnD,KAAKoD,0BApCb,4BAwCI,WACIpD,KAAK+C,YAAYN,SAAQ,SAACC,GACtBA,EAAKW,MAAQ,W,oEA1CzB,K,sKCAO,IAAMC,EAAb,WACI,aAAiCC,GAAkB,IAArCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,U,4FAA8B,SAC/CzD,KAAK0D,OAASF,EACdxD,KAAK2D,UAAYF,EACjBzD,KAAK4D,kBAAoBL,EACzBvD,KAAK6D,WAAa5D,SAASnB,cAAckB,KAAK4D,mB,QALtD,O,EAAA,G,EAAA,4BAOI,WAAgB,WACZ5D,KAAK0D,OAAOjB,SAAQ,SAACrE,GACjB,EAAKuF,UAAUvF,QAT3B,qBAeI,SAAQ0F,GAEJ9D,KAAK6D,WAAWE,QAAQD,Q,oEAjBhC,K,sKCAO,IAAME,EAAb,WACI,WAAYC,I,4FAAe,SACvBjE,KAAKiE,cAAgBA,EACrBjE,KAAKkE,gBAAkBlE,KAAKkE,gBAAgBC,KAAKnE,MACjDA,KAAKoE,OAASnE,SAASnB,cAAckB,KAAKiE,e,QAJlD,O,EAAA,G,EAAA,mBAMI,WAEIjE,KAAKoE,OAAOrF,UAAU2B,IAAI,gBAE1BT,SAASY,iBAAiB,UAC1Bb,KAAKkE,mBAXb,mBAaI,WAEIlE,KAAKoE,OAAOrF,UAAUqB,OAAO,gBAE7BH,SAASoE,oBAAoB,UACzBrE,KAAKkE,mBAlBjB,6BAoBI,SAAgBtB,GAEI,WAAZA,EAAI0B,KACJtE,KAAKuE,UAvBjB,+BA0BI,WAAoB,WAEhBvE,KAAKoE,OAAOvD,iBAAiB,SAAS,SAAC+B,IAC9BA,EAAI4B,OAAOzF,UAAUE,SAAS,iBAC9B2D,EAAI4B,OAAOzF,UAAUE,SAAS,yBAC/B,EAAKsF,gB,oEA/BrB,K,2tCCEO,IAAME,EAAb,a,+QAAA,U,QAAA,G,EAAA,E,+YACI,WAAYR,EAAeS,GAAY,a,4FAAA,UACnC,cAAMT,IACDS,WAAaA,EAClB,EAAKC,QAAU,EAAKP,OAAO9B,iBAAiB,gBAHT,EAD3C,O,EAAA,G,EAAA,8BAMI,WAQI,OAPeF,MAAMC,KAAKrC,KAAK2E,SAGTC,QAAO,SAACC,EAAKC,EAASC,GAExC,OADAF,EAAI,QAAD,OAASE,EAAQ,IAAOD,EAAQzB,MAC5BwB,IACR,MAbX,+BAgBI,WAAoB,WAChB,sDACA5E,SAASnB,cAAckB,KAAKiE,eACvBnF,cAAc,SACd+B,iBAAiB,UAAU,SAAC+B,GAEzBA,EAAIC,iBACJ,EAAK6B,WAAW,EAAKM,wBAvBrC,mBA2CI,WACI,0CACAhF,KAAK2E,QAAQlC,SAAQ,SAAAwC,GACjBA,EAAQ5B,MAAQ,W,oEA9C5B,GAAmCW,G,2tCCD5B,IAAMkB,EAAb,a,+QAAA,U,QAAA,G,EAAA,E,+YACI,WAAYjB,EAAeS,GAAY,a,4FAAA,UACnC,cAAMT,IACDS,WAAaA,EAFiB,EAD3C,O,EAAA,G,EAAA,gCAKI,WAAoB,WAChB,sDACAzE,SAASnB,cAAckB,KAAKiE,eACvBnF,cAAc,SACd+B,iBAAiB,UAAU,SAAC+B,GACzBA,EAAIC,iBACJ,EAAK6B,qB,oEAXrB,GAA2CV,G,sKCDpC,IAAMmB,EAAb,WACI,cAAoD,IAAtCC,EAAsC,EAAtCA,iBAAkBC,EAAoB,EAApBA,kB,4FAAoB,SAChDrF,KAAKoF,iBAAmBA,EACxBpF,KAAKqF,iBAAmBA,EACxBrF,KAAKsF,SAAWrF,SAASnB,cAAckB,KAAKoF,kBAC5CpF,KAAKuF,SAAWtF,SAASnB,cAAckB,KAAKqF,kB,QALpD,O,EAAA,G,EAAA,0BAOI,WAKI,MAJa,CACT/F,KAAMU,KAAKsF,SAAS1F,YACpB4F,KAAMxF,KAAKuF,SAAS3F,eAVhC,yBAcI,SAAY6F,EAAaC,GACjBD,IACAzF,KAAKsF,SAAS1F,YAAc6F,GAE5BC,IACA1F,KAAKuF,SAAS3F,YAAc8F,Q,oEAnBxC,K,wjCCEO,IAAMC,EAAb,a,+QAAA,U,MAAA,G,EAAA,E,+YACI,WAAY1B,GAAe,Q,MAAA,O,4FAAA,S,EAOT,SAAC2B,GAEf,IAEMC,EAFkBD,EAAMpB,OAEepD,aAAa,OAE1D,EAAK0E,WAAWxF,aAAa,MAAOuF,GAEpC,IAAME,EAAcH,EAAMI,cAAcC,cAAcnH,cAAc,kBAAkBc,YAEtF,EAAKsG,gBAAgBtG,YAAcmG,EAEnC,EAAKD,WAAWxF,aAAa,MAAOyF,GAEpC,8C,EArBuB,qB,EAAA,EACvB,cAAM9B,K,sFAEN,EAAK6B,WAAa,EAAK1B,OAAOtF,cAAc,gCAE5C,EAAKoH,gBAAkB,EAAK9B,OAAOtF,cAAc,4BAL1B,EAD/B,O,EAAA,E,qDAAA,CAAoCkF,G,8RCF7B,IAAMmC,EAAb,WACI,WAAYC,GAAS,Y,4FAAA,+BAaP,WACV,OAAOC,MAAM,iDAAkD,CAC3DC,QAAS,CACLC,cAAe,0CAGlB/G,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SAnBtB,0BAsBH,WACd,OAAOH,MAAM,oDAAqD,CAC9DC,QAAS,CACLC,cAAe,0CAGlB/G,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SA5BtB,sBA+BP,SAACE,GACX,OAAOL,MAAM,wDAAyD,CAClEM,OAAQ,QACRL,QAAS,CACLC,cAAe,uCACf,eAAgB,oBAEpBG,KAAMA,IAELlH,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SAxCtB,wBA2CL,SAACE,GACb,OAAOL,MAAM,uDAAwD,CACjEM,OAAQ,QACRL,QAAS,CACLC,cAAe,uCACf,eAAgB,oBAEpBG,KAAMA,IAELlH,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SApDtB,sBAuDP,SAACE,GACX,OAAOL,MAAM,oDAAqD,CAC9DM,OAAQ,OACRL,QAAS,CACLC,cAAe,uCACf,eAAgB,oBAEpBG,KAAMA,IAELlH,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SAhEtB,qBAmER,SAACI,GACV,OAAOP,MAAM,qDAAD,OAAsDO,GAAU,CACxED,OAAQ,SACRL,QAAS,CACLC,cAAe,0CAGlB/G,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SA1EtB,kBA6EX,SAACE,EAAME,GACb,OAAOP,MAAM,qDAAD,OAAsDO,EAAtD,UAAsE,CAC9ED,OAAQ,MACRL,QAAS,CACLC,cAAe,uCACf,eAAgB,oBAEpBG,KAAMA,IAELlH,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SAtFtB,qBAyFR,SAACE,EAAME,GAChB,OAAOP,MAAM,qDAAD,OAAsDO,EAAtD,WAAuE,CAC/ED,OAAQ,SACRL,QAAS,CACLC,cAAe,uCACf,eAAgB,oBAEpBG,KAAMA,IAELlH,MAAK,SAACgH,GAAD,OAAS,EAAKC,eAAeD,SAjGvCxG,KAAKoG,QAAUA,E,QAFvB,O,EAAA,G,EAAA,6BAMI,SAAeI,GACX,OAAIA,EAAIK,GACGL,EAAIM,OAGRC,QAAQC,OAAR,kBAA0BR,EAAIS,c,oEAX7C,KCAO,SAASC,EAAcC,EAAcC,GACxCD,EAAarI,cAAc,4BAA4Bc,YAAcwH,ECUzE,IAAMC,EAAiB,IAAI1B,EAAe,qBAC1C0B,EAAeC,oBAEf,IAAM/B,EAAW,IAAIJ,EAAS,CAC1BC,iBAAkB,cAClBC,iBAAkB,sBAIhBkC,EAAM,IAAIpB,EAAI,CAChBqB,QAAS,8CACTlB,QAAS,CACLC,cAAe,uCACf,eAAgB,sBAKlBkB,EAAaxH,SAASnB,cAAc,sBAGpC4I,EAAYzH,SAASnB,cAAc,wBAGnC6I,EAAe1H,SAASnB,cAAc,mBAGtC8I,EAAiB3H,SAASnB,cAAc,qBAGxC+I,EAAiB5H,SAASnB,cAAc,qBAExCkC,EAAS,CACXuB,cAAe,eACfP,qBAAsB,sBACtBE,oBAAqB,8BACrBZ,gBAAiB,oBACjBC,WAAY,wBAOVuG,EAAS7H,SAASnB,cAAc,WAGhCiJ,EAAgB9H,SAASnB,cAAc,0BAEvCkJ,EAAsB/H,SAASnB,cAAc,gCAGnD,SAASJ,EAAcuJ,EAAIC,GAEvB,IAAMC,EAAsB,IAAIjD,EAAsB,iBAAiB,WAEnEqC,EAAIa,WAAWH,GACVzI,MAAK,WACF0I,EAAW9H,SACX+H,EAAoB5D,WAEvBzE,OAAM,SAACC,GACJL,QAAQC,IAAII,SAIxBoI,EAAoBb,oBAEpBa,EAAoBE,OAIxB,SAASC,EAAkBC,EAAM9I,EAAQd,GAUrC,OATgB,IAAIR,EAChBoK,EAjCiB,YAmCjBlB,EAAe/I,gBACfmB,EAAOH,KACPiI,EAAIiB,QACJjB,EAAIkB,WACJ/J,EACAC,GAMR4I,EAAImB,cAEClJ,MAAK,SAACC,GACH8F,EAASoD,YAAYlJ,EAAOH,KAAMG,EAAOmJ,OACzC3I,SAASnB,cAAc,kBAAkBwB,aAAa,MAAOb,EAAOqI,QAEpEP,EAAIsB,kBACCrJ,MAAK,SAAAsJ,GAEF,IAAMC,EAAU,IAAIzF,EAAQ,CAExBE,MAAOsF,EACPrF,SAAU,SAACf,GAEP,IAEMoB,EAFUwE,EAAkB5F,EAAMjD,EAAQA,EAAOF,KAEvByJ,aAEhCD,EAAQE,QAAQnF,KAGpB,aAEJiF,EAAQG,mBAEXpJ,OAAM,SAACC,GACJL,QAAQC,IAAII,SAK5B,IAAMoJ,EAAsB,IAAI1E,EAAc,sBAAsB,SAAC2E,GACjElC,EAAcW,EAAgB,iBAE9BN,EAAI8B,YACAnK,KAAKC,UAAU,CACX2I,OAAQsB,EAAOE,UAGlB9J,MAAK,WAEFS,SAASnB,cAAc,kBAClBwB,aAAa,MAAO8I,EAAOE,QAEhCpC,EAAcW,EAAgB,aAE9BsB,EAAoB5E,WAEvBzE,OAAM,SAACC,GACJL,QAAQC,IAAII,SAIxBoJ,EAAoB7B,oBAGpBQ,EAAOjH,iBAAiB,SAAS,WAE7B0I,GAA0BC,kBAE1BD,GAA0BE,iBAC1BN,EAAoBd,UAIxB,IAAMqB,GAAoB,IAAIjF,EAAc,oBAAoB,SAAC2E,GAE7DlC,EAAcS,EAAc,iBAE5BJ,EAAIoC,cAAczK,KAAKC,UAAU,CAC7BG,KAAM8J,EAAOE,OACbV,MAAOQ,EAAOQ,UAGbpK,MAAK,WAEF+F,EAASoD,YACLS,EAAOE,OACPF,EAAOQ,QAGX1C,EAAcS,EAAc,aAE5B+B,GAAkBnF,WAErBzE,OAAM,SAACC,GACJL,QAAQC,IAAII,SAIxB2J,GAAkBpC,oBAGlBG,EAAW5G,iBAAiB,SAAS,WAEjC,IAAMgJ,EAAOtE,EAASmD,cAEtBnD,EAASoD,YAAYkB,EAAKvK,KAAMuK,EAAKrE,MAErCuC,EAAc1E,MAAQwG,EAAKvK,KAC3B0I,EAAoB3E,MAAQwG,EAAKrE,KAEjCsE,GAAuBN,kBAEvBE,GAAkBrB,UAKtB,IAAM0B,GAAsB,IAAItF,EAAc,sBAAsB,SAAC2E,GAEjE,IAAM1G,EAAO,CACTpD,KAAM8J,EAAOE,OACb/I,KAAM6I,EAAOQ,OACbxK,MAAO,IAGXmI,EAAIyC,YACA9K,KAAKC,UAAU,CACXG,KAAMoD,EAAKpD,KACXiB,KAAMmC,EAAKnC,KACXnB,MAAO,MAGVI,MAAK,SAAAC,GACF,IAAMsJ,EAAU,IAAIzF,EAAQ,CAExBE,MAAO,CAAC/D,GACRgE,SAAU,SAAChE,GAEP,IAEMqE,EAFUwE,EAAkB7I,EAAQA,EAAOJ,MAAOI,EAAOJ,MAAME,KAErCyJ,aAEhCD,EAAQE,QAAQnF,KAGpB,aAEJiF,EAAQG,gBAERa,GAAoBxF,WAkBvBzE,OAAM,SAACC,GACJL,QAAQC,IAAII,SAIxBgK,GAAoBzC,oBAGpBI,EAAU7G,iBAAiB,SAAS,WAEhCoJ,GAAyBT,kBAEzBS,GAAyBR,iBAEzBM,GAAoB1B,UAIxB,IAAMyB,GAAyB,IAAI/I,EAAcC,EAAQ2G,GAEzDmC,GAAuBI,mBAEvB,IAAMD,GAA2B,IAAIlJ,EAAcC,EAAQ4G,GAE3DqC,GAAyBC,mBAEzB,IAAMX,GAA4B,IAAIxI,EAAcC,EAAQ6G,GAE5D0B,GAA0BW,oB","sources":["webpack://mesto/./components/Card.js","webpack://mesto/./components/FormValidator.js","webpack://mesto/./components/Section.js","webpack://mesto/./components/Popup.js","webpack://mesto/./components/PopupWithForm.js","webpack://mesto/./components/PopupWithConfirmation.js","webpack://mesto/./components/UserInfo.js","webpack://mesto/./components/PopupWithImage.js","webpack://mesto/./components/Api.js","webpack://mesto/./utils/utils.js","webpack://mesto/./scripts/index.js"],"sourcesContent":["export class Card {\r\n    constructor(\r\n        card,\r\n        templateSelector,\r\n        handleCardClick,\r\n        myName,\r\n        apiPutLike,\r\n        apiDeleteLike,\r\n        onDeleteClick,\r\n        userId\r\n    ) {\r\n        this.card = card;\r\n        this.templateSelector = templateSelector;\r\n        this.handleCardClick = handleCardClick;\r\n        this.myName = myName;\r\n        this.apiPutLike = apiPutLike;\r\n        this.apiDeleteLike = apiDeleteLike;\r\n        this.onDeleteClick = onDeleteClick;\r\n        this.userId = userId\r\n    }\r\n\r\n    _createCardDomNode() {\r\n        this._cardTemplate = document\r\n            .querySelector(this.templateSelector)\r\n            .content\r\n            .querySelector('.element')\r\n            .cloneNode(true);\r\n    }\r\n\r\n    _makeCardRemovable() {\r\n        //вставляю в разметку добавленной карточки кнопку trash для удаления карточки\r\n        this._cardTemplate.querySelector('.element__trash').classList.remove('element__trash_visible');\r\n\r\n        // //навешиваю на кнопку trash слушатель для определения объекта карточки, на корзину которой кликнули\r\n        // this._cardTemplate.querySelector('.element__trash')\r\n        //     .addEventListener('click',\r\n        //         () => this.onDeleteClick(this.card._id, this._cardTemplate));\r\n    }\r\n\r\n    renderCard() {\r\n        this._createCardDomNode();\r\n        //получаю html код рисунка карточки и задаю ему атрибут scr со значением link из массива\r\n        this._cardTemplate.querySelector('.element__mask-group').setAttribute(\"src\", this.card.link);\r\n        this._cardTemplate.querySelector('.element__mask-group').setAttribute(\"alt\", this.card.name);\r\n        //получаю html код названия карточки и задаю ему название name из массива\r\n        this._cardTemplate.querySelector('.element__name').textContent = this.card.name;\r\n        //вставляю количество лайков в разметку\r\n        this._cardTemplate.querySelector('.element__like-amount').textContent = this.card.likes.length;\r\n        //определяю, есть ли мое имя в массиве лайков и, если да\r\n        if (this.card.likes.some((like) => like.name === this.myName)) {\r\n            //делаю лайк активным\r\n            this._cardTemplate.querySelector('.element__like').classList.add('element__like_active');\r\n        }\r\n        //определяю, моя ли это карточка\r\n        if (this.card.owner._id === this.userId) {\r\n            //делаю карточку удаляемой (с иконкой trash и присущими ей функциями)\r\n            this._makeCardRemovable();\r\n        }\r\n        this._addEventListeners();\r\n        return this._cardTemplate;\r\n    }\r\n\r\n    _likeCard = () => {\r\n        const _likeButton = this._cardTemplate.querySelector('.element__like');\r\n        _likeButton.classList.toggle('element__like_active');\r\n        //если лайк поставлен (лайк активный)\r\n        if (_likeButton.classList.contains('element__like_active')) {\r\n            //отправляю свое owner.name на сервер в массив likes\r\n            this.apiPutLike(\r\n                JSON.stringify({\r\n                    likes: this.card.owner.name\r\n                }), this.card._id\r\n            )\r\n                .then((result) => {\r\n                    console.log('лайк отправлен на сервер, мое имя в массиве лайков', result);\r\n                    //вставляю новое количество лайков в разметку\r\n                    this._cardTemplate.querySelector('.element__like-amount').textContent = result.likes.length;\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err); // выведем ошибку в консоль\r\n                });\r\n        }\r\n        //если лайк снят\r\n        else {\r\n            //удаляю свое owner.name из массива likes\r\n            this.apiDeleteLike(\r\n                JSON.stringify({\r\n                    likes: this.card.owner.name\r\n                }), this.card._id\r\n            )\r\n                .then(result => {\r\n                    //вставляю новое количество лайков в разметку\r\n                    this._cardTemplate.querySelector('.element__like-amount').textContent = result.likes.length;\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err); // выведем ошибку в консоль\r\n                });\r\n        }\r\n    }\r\n\r\n    _addEventListeners() {\r\n        this._cardTemplate.querySelector('.element__like')\r\n            .addEventListener('click', this._likeCard);\r\n        this._cardTemplate.querySelector('.element__button-mask-group')\r\n            .addEventListener('click', this.handleCardClick);\r\n        //навешиваю на кнопку trash слушатель для определения объекта карточки, на корзину которой кликнули\r\n        this._cardTemplate.querySelector('.element__trash')\r\n            .addEventListener('click',\r\n                () => this.onDeleteClick(this.card._id, this._cardTemplate));\r\n    }\r\n}","export class FormValidator {\r\n\r\n    constructor(config, formElement) {\r\n        this.config = config;\r\n        this.formElement = formElement;\r\n        this.inputFields = this.formElement.querySelectorAll('.form__input');\r\n        this.errorTexts = this.formElement.querySelectorAll('.popup__error');\r\n        this.saveButtons = this.formElement.querySelectorAll('.popup__save-button');\r\n    }\r\n\r\n    //задаю функцию удаления индикации поля при ошибке\r\n    _removeErrorIndication() {\r\n        this.inputFields.forEach(item => {\r\n            item.classList.remove('form__input_error');\r\n        });\r\n    }\r\n    //задаю функцию удаления текста ошибки\r\n    _deleteErrorMessage() {\r\n        this.errorTexts.forEach(item => {\r\n            item.textContent = '';\r\n        });\r\n    }\r\n    //задаю функцию деактивации кнопки сохранения данных ПОПАПА\r\n    _deactivateSaveButton() {\r\n        this.saveButtons.forEach((item) => {\r\n            item.disabled = true;\r\n            item.classList.add('popup__save-button_disabled');\r\n        });\r\n        document.querySelector('#delete').disabled = false;\r\n        document.querySelector('#delete').classList.remove('popup__save-button_disabled');\r\n    }\r\n\r\n    // объединяю очистку от индикации ошибок в один метод\r\n    resetValidation() {\r\n        this._removeErrorIndication();\r\n        this._deleteErrorMessage();\r\n        this._deactivateSaveButton()\r\n    }\r\n\r\n    //задаю функцию очистки полей по закрытии ПОПАПА\r\n    eraseInputText() {\r\n        this.inputFields.forEach((item) => {\r\n            item.value = '';\r\n        })\r\n    }\r\n\r\n    _hideInputError = (inputField) => {\r\n        // Находим <input>, в котором отображается ошибка, и соответствующий элемент <span>.\r\n        const errorName = inputField.getAttribute('name');\r\n        const errorElement = this.formElement.querySelector(`#${errorName}`);\r\n        //удаляем стили поля и текста при ошибке\r\n        inputField.classList.remove(this.config.inputErrorClass);\r\n        errorElement.classList.remove(this.config.errorClass);\r\n        // Удаляем текст ошибки из блока.\r\n        errorElement.textContent = '';\r\n    }\r\n\r\n    _showInputError = (inputField) => {\r\n        // Находим <input>, в котором отображается ошибка, и соответствующий элемент <span>.\r\n        const errorName = inputField.getAttribute('name');\r\n        const errorElement = this.formElement.querySelector(`#${errorName}`);\r\n        inputField.classList.add(this.config.inputErrorClass);\r\n        // Записываем текст ошибки в блок отображения ошибки.\r\n        errorElement.textContent = inputField.validationMessage;\r\n        errorElement.classList.add(this.config.errorClass);\r\n    };\r\n\r\n    _checkInputValidity = (inputField) => {\r\n        //проверяем содержание поля инпут на валидность методом validity.valid\r\n        if (inputField.validity.valid) {\r\n            this._hideInputError(inputField);\r\n        } else {\r\n            this._showInputError(inputField);\r\n        }\r\n    }\r\n\r\n    //задаем состояние кнопки попапа в зависимости от проверки валидности формы\r\n    _toggleButtonState = () => {\r\n        // Проверяем валидность формы.\r\n        const isFormValid = this.formElement.checkValidity();\r\n        // Если форма невалидна, то присваиваем свойству disabled кнопки значение true\r\n        const saveButtonElement = this.formElement.querySelector(this.config.submitButtonSelector);\r\n        saveButtonElement.disabled = !isFormValid;\r\n        // Если форма невалидна, добавляем кнопке класс\r\n        saveButtonElement.classList.toggle(this.config.inactiveButtonClass, !isFormValid);\r\n    }\r\n\r\n    _setEventListeners = () => {\r\n        const inputList = Array.from(this.formElement.querySelectorAll(this.config.inputSelector));\r\n        this._toggleButtonState();\r\n        // Навешиваем слушатели на ввод в поля формы попапа.\r\n        inputList.forEach((item) => {\r\n            // const inputField = item;\r\n            item.addEventListener('input', () => {\r\n                this._checkInputValidity(item);\r\n                this._toggleButtonState();\r\n            });\r\n        });\r\n    }\r\n\r\n    enableValidation = () => {\r\n        this.formElement.addEventListener('submit', (evt) => {\r\n            evt.preventDefault();\r\n        });\r\n        this._setEventListeners();\r\n    }\r\n}","export class Section {\r\n    constructor({ items, renderer }, elementsSelector) {\r\n        this._items = items;\r\n        this._renderer = renderer;\r\n        this._elementsSelector = elementsSelector;\r\n        this._container = document.querySelector(this._elementsSelector)\r\n    }\r\n    renderSection() {\r\n        this._items.forEach((card) => {\r\n            this._renderer(card)\r\n            // const renderedCard = this._renderer(card);\r\n            // this._container.append(renderedCard);\r\n        });\r\n    }\r\n\r\n    addItem(renderedNewCard) {\r\n        //вставляю разметку добавленной карточкои в elements\r\n        this._container.prepend(renderedNewCard);\r\n    }\r\n}","export class Popup {\n    constructor(popupSelector) {\n        this.popupSelector = popupSelector;\n        this._handleEscClose = this._handleEscClose.bind(this);\n        this._popup = document.querySelector(this.popupSelector)\n    }\n    open() {\n        //добавяю в код ПОПАПА класс, отвечающий за отображение ПОПАПА\n        this._popup.classList.add('popup_opened');\n        // навешиваю слушатель события для закрытия попапа по esc\n        document.addEventListener('keydown',\n        this._handleEscClose);\n    }\n    close() {\n        //удаляю клас, отвечающий за отображение ПОПАПА\n        this._popup.classList.remove('popup_opened');\n        // удаляю слушатель события для закрытия попапа по esc\n        document.removeEventListener('keydown',\n            this._handleEscClose);\n    }\n    _handleEscClose(evt) {\n        //помещаю в переменную элемент открытого в настоящий момент ПОПАПА\n        if (evt.key === 'Escape') {\n            this.close();\n        }\n    }\n    setEventListeners() {\n        //программирую закрытие ПОПАПА по клику (на крестик или на оверлей)\n        this._popup.addEventListener('click', (evt) => {\n            if ((evt.target.classList.contains('popup_opened')) ||\n                (evt.target.classList.contains('popup__close-button'))) {\n                this.close()\n            }\n        })\n    }\n}","import { Popup } from './Popup.js';\r\n\r\nexport class PopupWithForm extends Popup {\r\n    constructor(popupSelector, submitForm) {\r\n        super(popupSelector);\r\n        this.submitForm = submitForm;\r\n        this._inputs = this._popup.querySelectorAll('.form__input');\r\n    }\r\n    _getInputValues() {\r\n        const inputs = Array.from(this._inputs);\r\n        //преобразую массив c разметками полей ввода с введенными значениями\r\n        //в объект с полями fild1, field 2 (if any)\r\n        const values = inputs.reduce((acc, current, index) => {\r\n            acc[`field${index + 1}`] = current.value;\r\n            return acc;\r\n        }, {});\r\n        return values;\r\n    }\r\n    setEventListeners() {\r\n        super.setEventListeners();\r\n        document.querySelector(this.popupSelector)\r\n            .querySelector('.form')\r\n            .addEventListener('submit', (evt) => {\r\n                //Эта строчка отменяет стандартную отправку формы\r\n                evt.preventDefault();\r\n                this.submitForm(this._getInputValues());\r\n            })\r\n    }\r\n    // setEventListeners() {\r\n    //     super.setEventListeners();\r\n    //     document.querySelector(this.popupSelector)\r\n    //         .querySelector('.form')\r\n    //         .addEventListener('submit', (evt) => {\r\n    //             if (this.popupSelector === '.popup_delete') {\r\n    //                 console.log('отработал if');\r\n    //                 // Эта строчка отменяет стандартную отправку формы.\r\n    //                 evt.preventDefault();\r\n    //                 this.submitForm();\r\n    //             } else {\r\n    //                 //Эта строчка отменяет стандартную отправку формы\r\n    //                 evt.preventDefault();\r\n    //                 this.submitForm(this._getInputValues());\r\n    //             }\r\n    //         })\r\n    // }\r\n    close() {\r\n        super.close();\r\n        this._inputs.forEach(element => {\r\n            element.value = '';\r\n        });\r\n    }\r\n}","import { Popup } from './Popup.js';\r\nexport class PopupWithConfirmation extends Popup {\r\n    constructor(popupSelector, submitForm) {\r\n        super(popupSelector);\r\n        this.submitForm = submitForm;\r\n    }\r\n    setEventListeners() {\r\n        super.setEventListeners();\r\n        document.querySelector(this.popupSelector)\r\n            .querySelector('.form')\r\n            .addEventListener('submit', (evt) => {\r\n                evt.preventDefault();\r\n                this.submitForm();\r\n            }\r\n            )\r\n    }\r\n}","export class UserInfo {\r\n    constructor({ userNameSelector, userInfoSelector }) {\r\n        this.userNameSelector = userNameSelector;\r\n        this.userInfoSelector = userInfoSelector;\r\n        this.userName = document.querySelector(this.userNameSelector);\r\n        this.userInfo = document.querySelector(this.userInfoSelector)\r\n    }\r\n    getUserInfo() {\r\n        const user = {\r\n            name: this.userName.textContent,\r\n            info: this.userInfo.textContent\r\n        };\r\n        return user\r\n    }\r\n    setUserInfo(newUserName, newUserInfo) {\r\n        if (newUserName) {\r\n            this.userName.textContent = newUserName;\r\n        }\r\n        if (newUserInfo) {\r\n            this.userInfo.textContent = newUserInfo;\r\n        }\r\n    }\r\n}","import { Popup } from './Popup.js';\r\n\r\nexport class PopupWithImage extends Popup {\r\n    constructor(popupSelector) {\r\n        super(popupSelector);\r\n        // this.imagePopup = document.querySelector(`${popupSelector} .popup__mask-group-full-size`);\r\n        this.imagePopup = this._popup.querySelector('.popup__mask-group-full-size');\r\n        // this.imagePopupTitle = document.querySelector(`${popupSelector} .popup__title-mask-group`);\r\n        this.imagePopupTitle = this._popup.querySelector('.popup__title-mask-group');\r\n    }\r\n    handleCardClick = (event) => {\r\n        //определяю на какой элемент кликнули\r\n        const maskGroupTarget = event.target;\r\n        //извелкаю из кода кликнутого элемента путь к КАРТИНКЕ (src)\r\n        const maskGroupTargetImage = maskGroupTarget.getAttribute('src');\r\n        //вставляю путь КАРТИНКИ  в ПОПАП КАРТИНКИ\r\n        this.imagePopup.setAttribute(\"src\", maskGroupTargetImage);\r\n        //извлекаю название КАРТИНКИ\r\n        const elementName = event.currentTarget.parentElement.querySelector('.element__name').textContent;\r\n        //вставляю название КАРТИНКИ в ПОПАП КАРТИНКИ\r\n        this.imagePopupTitle.textContent = elementName;\r\n        //вставляю атрибут alt в тэг КАРТИНКИ\r\n        this.imagePopup.setAttribute(\"alt\", elementName);\r\n        //вставляю метод для открытия ПОПАПА КАРТИНКИ\r\n        super.open()\r\n    }\r\n}","export class Api {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        }\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n\r\n    getUserInfo = () => {\r\n        return fetch('https://nomoreparties.co/v1/cohort-34/users/me', {\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n            }\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    getInitialCards = () => {\r\n        return fetch('https://mesto.nomoreparties.co/v1/cohort-34/cards', {\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8'\r\n            }\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    patchAvatar = (body) => {\r\n        return fetch('https://nomoreparties.co/v1/cohort-34/users/me/avatar', {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    };\r\n\r\n    patchUserInfo = (body) => {\r\n        return fetch('https://mesto.nomoreparties.co/v1/cohort-34/users/me', {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    postNewCard = (body) => {\r\n        return fetch('https://mesto.nomoreparties.co/v1/cohort-34/cards', {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    deleteCard = (cardId) => {\r\n        return fetch(`https://mesto.nomoreparties.co/v1/cohort-34/cards/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n            }\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    putLike = (body, cardId) => {\r\n        return fetch(`https://mesto.nomoreparties.co/v1/cohort-34/cards/${cardId}/likes`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n\r\n    deleteLike = (body, cardId) => {\r\n        return fetch(`https://mesto.nomoreparties.co/v1/cohort-34/cards/${cardId}/likes `, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: body\r\n        })\r\n            .then((res) => this._checkResponse(res))\r\n    }\r\n}","export function renderLoading(formSelector, saveButtonTitle) {\r\n    formSelector.querySelector('.popup__save-button-text').textContent = saveButtonTitle;\r\n}","import { Card } from '../components/Card.js';\r\nimport { FormValidator } from '../components/FormValidator.js';\r\nimport { Section } from '../components/Section.js';\r\nimport { PopupWithForm } from '../components/PopupWithForm.js';\r\nimport { PopupWithConfirmation } from '../components/PopupWithConfirmation.js';\r\nimport { UserInfo } from '../components/UserInfo.js';\r\nimport '../pages/index.css';\r\nimport { PopupWithImage } from '../components/PopupWithImage.js';\r\nimport { Api } from '../components/Api.js';\r\nimport { renderLoading } from '../utils/utils.js';\r\n\r\nconst popupWithImage = new PopupWithImage('.popup_mask-group');\r\npopupWithImage.setEventListeners();\r\n\r\nconst userInfo = new UserInfo({\r\n    userNameSelector: '.info__name',\r\n    userInfoSelector: '.info__engagement'\r\n});\r\n\r\n//создаю экземляр класса Апи для запросов к серверу методами этого класса\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-34',\r\n    headers: {\r\n        authorization: 'f6c561df-ef33-43f7-885e-c25f80e98ae8',\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\n//помещаю код кнопки \"Редактировать\" инфо в константу\r\nconst editButton = document.querySelector('.info__edit-button');\r\n\r\n//помещаю код кнопки \"Добваить\" картинку/карточку в константу\r\nconst addButton = document.querySelector('.profile__add-button');\r\n\r\n//помещаю код всей ФОРМЫ ввода для \"Edit info\" в константу\r\nconst formEditInfo = document.querySelector('.form_edit-info');\r\n\r\n//помещаю код всей ФОРМЫ ввода для \"Form element\" в константу\r\nconst formAddElement = document.querySelector('.form_add-element');\r\n\r\n//помещаю код всей ФОРМЫ для \"Edit avatar\" в константу\r\nconst formEditAvatar = document.querySelector('.form_edit-avatar');\r\n\r\nconst config = {\r\n    inputSelector: '.form__input',\r\n    submitButtonSelector: '.popup__save-button',\r\n    inactiveButtonClass: 'popup__save-button_disabled',\r\n    inputErrorClass: 'form__input_error',\r\n    errorClass: 'popup__error_visible',\r\n}\r\n\r\n//помещаю в переменнную селектор template'a разметки карточки \r\nconst templateSelector = \".template\";\r\n\r\n//помещаю в переменную разметку аватара\r\nconst avatar = document.querySelector('.avatar');\r\n\r\n//помещаю в переменную разметку поля ввода для имени автора\r\nconst infoNameField = document.querySelector('.form__input_info_name');\r\n//помещаю в переменную разметку поля ввода для рода занятий автора\r\nconst infoEngagementField = document.querySelector('.form__input_info_engagement');\r\n\r\n//создаю обработчик нажатия на корзину удаления карточки\r\nfunction onDeleteClick(id, cardMarkup) {\r\n    //создаю обработчик submit'a попапа удаления карточки\r\n    const deleteCardPopupForm = new PopupWithConfirmation('.popup_delete', () => {\r\n        // удаляю объект карточки с сервера и разметку карточки из разметки страницы\r\n        api.deleteCard(id)\r\n            .then(() => {\r\n                cardMarkup.remove();\r\n                deleteCardPopupForm.close();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err); // выведем ошибку в консоль\r\n            })\r\n    });\r\n    //прикрепляю обработчик к форме удаления попапа\r\n    deleteCardPopupForm.setEventListeners();\r\n    //открываю попап удаления карточки\r\n    deleteCardPopupForm.open();\r\n};\r\n\r\n//задаю функцию создания экземпляра класса карточки вместе с обработчиком ее удаления\r\nfunction createCardExample(data, result, userId) {\r\n    const newCard = new Card(\r\n        data,\r\n        templateSelector,\r\n        popupWithImage.handleCardClick,\r\n        result.name,\r\n        api.putLike,\r\n        api.deleteLike,\r\n        onDeleteClick,\r\n        userId);\r\n    return newCard;\r\n}\r\n\r\n//отрисовываю начальные данные о пользователе - свойства name, about, avatar\r\n//запрашиваю с сервера информацию о пользователе - свойства name, about, avatar\r\napi.getUserInfo()\r\n    //вставляю информацию из полученного объекта в разметку\r\n    .then((result) => {\r\n        userInfo.setUserInfo(result.name, result.about);\r\n        document.querySelector('.avatar__photo').setAttribute(\"src\", result.avatar);\r\n        // получаю с сервера массив с дданными начальных карточек для их рендеринга\r\n        api.getInitialCards()\r\n            .then(initialCards => {\r\n                // отрисовываю массив с начальными карточками через создание экзепляра класса Section\r\n                const section = new Section({\r\n                    // задаю значения параметров конструктора класса Section\r\n                    items: initialCards,\r\n                    renderer: (item) => {\r\n                        //создаю экземпляр класса Card вместе с обработчиком удаления карточки\r\n                        const newCard = createCardExample(item, result, result._id);\r\n                        //отрисовываю карточку (создаю ДомНоду)\r\n                        const renderedNewCard = newCard.renderCard();\r\n                        //вставляю отрисованную карточку в контейнер\r\n                        section.addItem(renderedNewCard)\r\n                    }\r\n                },\r\n                    '.elements');\r\n                //вставляю карточки в разметку\r\n                section.renderSection();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err); // выведем ошибку в консоль\r\n            })\r\n    })\r\n\r\n//создаю обработчик формы редактирования аватара\r\nconst editAvatarPopupForm = new PopupWithForm('.popup_edit-avatar', (values) => {\r\n    renderLoading(formEditAvatar, 'Сохранение...');\r\n    //отправляю новую фото аватара на сервер\r\n    api.patchAvatar(\r\n        JSON.stringify({\r\n            avatar: values.field1\r\n        }))\r\n        //в случае успеха отрабатывает обработчик формы\r\n        .then(() => {\r\n            //вставляю в разметку новый путь к фото аватара\r\n            document.querySelector('.avatar__photo')\r\n                .setAttribute(\"src\", values.field1);\r\n            //возвращаю старое название кнопке Сохранить\r\n            renderLoading(formEditAvatar, 'Сохранить');\r\n            //закрываю попап методом экзкмпляра класса PopupWithForm\r\n            editAvatarPopupForm.close();\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n})\r\n//прикрепляю обработчик к форме\r\neditAvatarPopupForm.setEventListeners();\r\n\r\n//программирую нажатие на аватар\r\navatar.addEventListener('click', () => {\r\n    // очищаю поля ввода от индикации ошибок\r\n    popupEditAvatarValidation.resetValidation();\r\n    //обнуляю поля формы Add button (+) для следующего ввода\r\n    popupEditAvatarValidation.eraseInputText();\r\n    editAvatarPopupForm.open();\r\n})\r\n//создаю обработчик формы edit info\r\n// создаю экземпляр класса PopupWithForm для попапа edit info\r\nconst editInfoPopupForm = new PopupWithForm('.popup_edit-info', (values) => {\r\n    //перед запросом на сервер меняю текст кнопки попапа\r\n    renderLoading(formEditInfo, 'Сохранение...');\r\n    //заменяю данные о пользователе на сервере\r\n    api.patchUserInfo(JSON.stringify({\r\n        name: values.field1,\r\n        about: values.field2\r\n    }))\r\n        //в случае успеха \r\n        .then(() => {\r\n            //задаю даныые о пользоваетеле методом класса UserInfo\r\n            userInfo.setUserInfo(\r\n                values.field1,\r\n                values.field2\r\n            );\r\n            // возвращаю старое название кнопке Сохранить\r\n            renderLoading(formEditInfo, 'Сохранить');\r\n            //закрываю попап методом класса PopupWithForm\r\n            editInfoPopupForm.close();\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n});\r\n// Прикрепляею обработчик к форме в созданном экземпляре попапа\r\neditInfoPopupForm.setEventListeners();\r\n\r\n//программирую нажатие кнопки \"Редактировать\" (editButton)\r\neditButton.addEventListener('click', function pressEditButton() {\r\n    //получаю объект с данными пользователя\r\n    const user = userInfo.getUserInfo();\r\n    //помещаю полученные данные пользователя в разметку блока Info\r\n    userInfo.setUserInfo(user.name, user.info);\r\n    //помещаю полученные данные пользователя в поля формы при первом открытии\r\n    infoNameField.value = user.name;\r\n    infoEngagementField.value = user.info;\r\n    //очищаю поля ввода от индикации ошибок\r\n    popupEditInfoValidator.resetValidation();\r\n    //открываю попап для редактирования user Info\r\n    editInfoPopupForm.open();\r\n});\r\n\r\n// создаю обработчик для формы add element\r\n// создаю экземпляр класса PopupWithForm для попапа add element\r\nconst addElementPopupForm = new PopupWithForm('.popup_add-element', (values) => {\r\n    // в качестве параметров функции использую значения, полученные в input и задаю пустой массив лайкнувших\r\n    const item = {\r\n        name: values.field1,\r\n        link: values.field2,\r\n        likes: []\r\n    };\r\n    //отправляю новую карточку на сервер\r\n    api.postNewCard(\r\n        JSON.stringify({\r\n            name: item.name,\r\n            link: item.link,\r\n            likes: []\r\n        })\r\n    )\r\n        .then(result => {\r\n            const section = new Section({\r\n                // задаю значения параметров конструктора класса Section\r\n                items: [result],\r\n                renderer: (result) => {\r\n                    //создаю экземпляр класса Card вместе с обработчиком удаления карточки\r\n                    const newCard = createCardExample(result, result.owner, result.owner._id);\r\n                    //вставляю контент из инпута в экземпляр класса Card, создавая карточку\r\n                    const renderedNewCard = newCard.renderCard();\r\n                    //вставляю разметку добавленной карточки в elements\r\n                    section.addItem(renderedNewCard);\r\n                }\r\n            },\r\n                '.elements');\r\n            //отрисовываю карточку, запуская renderer\r\n            section.renderSection();\r\n            // закрываю попап методом из класса PopupWithForm, содержащий очистку полей\r\n            addElementPopupForm.close()\r\n        })\r\n        // .then(result => {\r\n        //     //создаю экземпляр класса Card вместе с обработчиком удаления карточки\r\n        //     const newCard = createCardExample(result, result.owner, result.owner._id);\r\n        //     //вставляю контент из инпута в экземпляр класса Card, создавая карточку\r\n        //     const renderedNewCard = newCard.renderCard();\r\n        //     const section = new Section({\r\n        //         // задаю значения параметров конструктора класса Section\r\n        //         items: result,\r\n        //         renderer: renderedNewCard\r\n        //     },\r\n        //         '.elements');\r\n        //     //вставляю карточку в контейнер\r\n        //     section.addItem(renderedNewCard);\r\n        //     // закрываю попап методом из класса PopupWithForm, содержащий очистку полей\r\n        //     addElementPopupForm.close()\r\n        // })\r\n        .catch((err) => {\r\n            console.log(err); // выведем ошибку в консоль\r\n        })\r\n})\r\n// Прикрепляю обработчик к форме в созданном экземпляре попапа\r\naddElementPopupForm.setEventListeners();\r\n\r\n// программирую нажатие кнопки \"Добавить\" (+) (addButton)\r\naddButton.addEventListener('click', function pressAddButton() {\r\n    // очищаю поля ввода от индикации ошибок\r\n    popupAddElementValidator.resetValidation()\r\n    //обнуляю поля формы Add button (+) для следующего ввода\r\n    popupAddElementValidator.eraseInputText();\r\n    // openPopup(popupAddElement);\r\n    addElementPopupForm.open();\r\n});\r\n\r\n// задаю правила валидации через создание экзепляров класса FormValidate для каждого попапа с формой ввода\r\nconst popupEditInfoValidator = new FormValidator(config, formEditInfo);\r\n\r\npopupEditInfoValidator.enableValidation();\r\n\r\nconst popupAddElementValidator = new FormValidator(config, formAddElement);\r\n\r\npopupAddElementValidator.enableValidation();\r\n\r\nconst popupEditAvatarValidation = new FormValidator(config, formEditAvatar);\r\n\r\npopupEditAvatarValidation.enableValidation();"],"names":["Card","card","templateSelector","handleCardClick","myName","apiPutLike","apiDeleteLike","onDeleteClick","userId","_likeButton","_cardTemplate","querySelector","classList","toggle","contains","JSON","stringify","likes","owner","name","_id","then","result","console","log","textContent","length","catch","err","this","document","content","cloneNode","remove","_createCardDomNode","setAttribute","link","some","like","add","_makeCardRemovable","_addEventListeners","addEventListener","_likeCard","FormValidator","config","formElement","inputField","errorName","getAttribute","errorElement","inputErrorClass","errorClass","validationMessage","validity","valid","_hideInputError","_showInputError","isFormValid","checkValidity","saveButtonElement","submitButtonSelector","disabled","inactiveButtonClass","inputList","Array","from","querySelectorAll","inputSelector","_toggleButtonState","forEach","item","_checkInputValidity","evt","preventDefault","_setEventListeners","inputFields","errorTexts","saveButtons","_removeErrorIndication","_deleteErrorMessage","_deactivateSaveButton","value","Section","elementsSelector","items","renderer","_items","_renderer","_elementsSelector","_container","renderedNewCard","prepend","Popup","popupSelector","_handleEscClose","bind","_popup","removeEventListener","key","close","target","PopupWithForm","submitForm","_inputs","reduce","acc","current","index","_getInputValues","element","PopupWithConfirmation","UserInfo","userNameSelector","userInfoSelector","userName","userInfo","info","newUserName","newUserInfo","PopupWithImage","event","maskGroupTargetImage","imagePopup","elementName","currentTarget","parentElement","imagePopupTitle","Api","options","fetch","headers","authorization","res","_checkResponse","body","method","cardId","ok","json","Promise","reject","status","renderLoading","formSelector","saveButtonTitle","popupWithImage","setEventListeners","api","baseUrl","editButton","addButton","formEditInfo","formAddElement","formEditAvatar","avatar","infoNameField","infoEngagementField","id","cardMarkup","deleteCardPopupForm","deleteCard","open","createCardExample","data","putLike","deleteLike","getUserInfo","setUserInfo","about","getInitialCards","initialCards","section","renderCard","addItem","renderSection","editAvatarPopupForm","values","patchAvatar","field1","popupEditAvatarValidation","resetValidation","eraseInputText","editInfoPopupForm","patchUserInfo","field2","user","popupEditInfoValidator","addElementPopupForm","postNewCard","popupAddElementValidator","enableValidation"],"sourceRoot":""}